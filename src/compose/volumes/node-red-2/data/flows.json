[
    {
        "id": "5b72d640.8efe98",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e53e07f5.50b6b8",
        "type": "oi4-mam-to-aas-onboarding",
        "z": "5b72d640.8efe98",
        "conversationID": "",
        "senderID": "",
        "receiverID": "",
        "submodelID": "",
        "manufacturer": "",
        "manufactureruri": "",
        "model": "",
        "serialnumber": "",
        "hardwarerevision": "",
        "deviceclass": "",
        "devicemanual": "",
        "productinstanceuri": "",
        "productcode": "",
        "devicerevision": "",
        "revisioncounter": "",
        "softwarerevision": "",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "f14961d.7f329a",
                "4ef6840.212b87c"
            ]
        ]
    },
    {
        "id": "f14961d.7f329a",
        "type": "i40-aas-onboarding",
        "z": "5b72d640.8efe98",
        "conversationID": "",
        "senderID": "http://sap.com/123",
        "receiverID": "http://sap.com/123",
        "submodelID": "http://sap.com/123",
        "manufacturer": "",
        "manufactureruri": "",
        "model": "",
        "serialnumber": "",
        "hardwarerevision": "",
        "deviceclass": "",
        "devicemanual": "",
        "productinstanceuri": "",
        "productcode": "",
        "devicerevision": "",
        "revisioncounter": "",
        "softwarerevision": "",
        "x": 850,
        "y": 200,
        "wires": [
            [
                "f3658ee6.b011",
                "c022e350.6254c"
            ]
        ]
    },
    {
        "id": "eb365002.4e33a",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "",
        "topic": "oi4/+/+/+/+/+/pub/mam/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "dbb00a87.497d98"
            ]
        ]
    },
    {
        "id": "4ef6840.212b87c",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "parse MAM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "93771c05.9d1aa",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "Get MAM",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 500,
        "y": 140,
        "wires": []
    },
    {
        "id": "8ba5551b.a12e08",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub device",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "1bc9cc70.ed66f4"
            ]
        ]
    },
    {
        "id": "3925ce8b.850ae2",
        "type": "mqtt out",
        "z": "5b72d640.8efe98",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "fdff4dc.78908b",
        "x": 710,
        "y": 531,
        "wires": []
    },
    {
        "id": "37f7bd0b.b707e2",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 730,
        "y": 580,
        "wires": []
    },
    {
        "id": "f8161ded.90bbf",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "health",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/health/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 110,
        "y": 631,
        "wires": [
            [
                "99cf4c35.4ecde"
            ]
        ]
    },
    {
        "id": "dbdb5828.9962a8",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "Master Asset Model",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/mam/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 150,
        "y": 531,
        "wires": [
            [
                "60de2462.65a55c"
            ]
        ]
    },
    {
        "id": "1bc9cc70.ed66f4",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "Master Asset Model",
        "func": "\nvar myCorrelationId = \"\";\n\n/* \n  Do we have to manipulate the CorrelationId, \n  because request (get) comes from somewere? \n*/\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\nmsg.payload = {\n    \"MessageId\": \"<publisherId + timestamp>\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"<oi4Identifier of application container>\",\n    \"DataSetClassId\": \"MyApp-Device-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"<oi4Identifier of data source>\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"<yyyy-mm-ddThh:mm:ss.xxx+hh:mm>\",\n            \"Status\": 0,\n            \"Payload\": { }\n        }\n    ]\n};\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.Messages[0].Payload = global.get(\"MyAppMAM\");\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/mam/\" + global.get(\"MyAppId\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 531,
        "wires": [
            [
                "3925ce8b.850ae2",
                "37f7bd0b.b707e2"
            ]
        ]
    },
    {
        "id": "604c1f41.5d8a",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "license",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/license/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "c1f12e71.fe843"
            ]
        ]
    },
    {
        "id": "9c424e5.79cfeb",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "rtLicense",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/rtLicense/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 120,
        "y": 949,
        "wires": [
            [
                "32833899.e036e8"
            ]
        ]
    },
    {
        "id": "8eb03da8.f5dc6",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "license",
        "func": "\nvar myCorrelationId = \"\";\n\n/* we got an get-topic from somewere */\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\nmsg.payload = {\n    \"MessageId\": \"\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"\",\n    \"DataSetClassId\": \"MyApp-License-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"\",\n            \"Status\": 0,\n            \"Payload\": {\n              \"licenses\": [\n                {\n                  \"licenseId\": \"MyLic\",\n                  \"components\": [\n                    {\n                      \"component\": \"MyCmp\",\n                      \"licAuthor\": [\n                        \"Konrad\"\n                      ],\n                      \"licAddText\": \"no additional text\"\n                    }\n                  ]\n                }\n              ]\n            }\n        }\n    ]\n};\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/license/\" + global.get(\"MyAppId\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 740,
        "wires": [
            [
                "3925ce8b.850ae2",
                "37f7bd0b.b707e2"
            ]
        ]
    },
    {
        "id": "ed2479e7.098f38",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "rtLicense",
        "func": "\nvar myCorrelationId = \"\";\n\n/* we got an get-topic from somewere */\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\nmsg.payload = {\n    \"MessageId\": \"\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"\",\n    \"DataSetClassId\": \"MyApp-RtLicense-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"\",\n            \"Status\": 0,\n            \"Payload\": {}\n        }\n    ]\n};\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/rtLicense/\" + global.get(\"MyAppId\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 949,
        "wires": [
            [
                "3925ce8b.850ae2",
                "37f7bd0b.b707e2"
            ]
        ]
    },
    {
        "id": "566a5857.ebb188",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "licenseText",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/licenseText/MyLic",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 120,
        "y": 840,
        "wires": [
            [
                "5ebfe9ff.c2a6a8"
            ]
        ]
    },
    {
        "id": "48f2e3e8.304cdc",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "licenseText",
        "func": "\nvar myCorrelationId = \"\";\n\n/* we got an get-topic from somewere */\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\nmsg.payload = {\n    \"MessageId\": \"\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"\",\n    \"DataSetClassId\": \"MyApp-LicenseText-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"\",\n            \"Status\": 0,\n            \"Payload\": {\n              \"licText\": \"test test\"\n            }\n        }\n    ]\n};\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/licenseText/\" + \"MyLic\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 840,
        "wires": [
            [
                "37f7bd0b.b707e2",
                "3925ce8b.850ae2"
            ]
        ]
    },
    {
        "id": "948a8114.8fe17",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "health",
        "func": "\nvar myCorrelationId = \"\";\n\n/* we got an get-topic from somewere */\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\n/* We got fresh data direct from sensor */\nif (msg.payload.Payload !== undefined)\n{\n    var myPayload = msg.payload.Payload;\n}\n\n\nmsg.payload = {\n    \"MessageId\": \"\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"\",\n    \"DataSetClassId\": \"MyApp-health-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"\",\n            \"Status\": 0,\n            \"Payload\": {\n                \"health\": \"NORMAL_0\",\n                \"healthState\": 100\n            }\n        }\n    ]\n};\n\n//\"health\": 0,\n//                \"healthState\": 100\n\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nif (myPayload !== undefined)\n{\n    msg.payload.Messages[0].Payload = myPayload;\n}\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/health/\" + global.get(\"MyAppId\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 631,
        "wires": [
            [
                "3925ce8b.850ae2",
                "37f7bd0b.b707e2"
            ]
        ]
    },
    {
        "id": "f83ecc48.95427",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub rtLicense",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 996,
        "wires": [
            [
                "ed2479e7.098f38"
            ]
        ]
    },
    {
        "id": "603cea27.39cf84",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub licenseText",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 160,
        "y": 887,
        "wires": [
            [
                "48f2e3e8.304cdc"
            ]
        ]
    },
    {
        "id": "1f046de9.d0d2d2",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub license",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 788,
        "wires": [
            [
                "8eb03da8.f5dc6"
            ]
        ]
    },
    {
        "id": "99cf4c35.4ecde",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 631,
        "wires": [
            [
                "948a8114.8fe17"
            ]
        ]
    },
    {
        "id": "60de2462.65a55c",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 531,
        "wires": [
            [
                "1bc9cc70.ed66f4"
            ]
        ]
    },
    {
        "id": "c1f12e71.fe843",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "8eb03da8.f5dc6"
            ]
        ]
    },
    {
        "id": "5ebfe9ff.c2a6a8",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 840,
        "wires": [
            [
                "48f2e3e8.304cdc"
            ]
        ]
    },
    {
        "id": "32833899.e036e8",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 949,
        "wires": [
            [
                "ed2479e7.098f38"
            ]
        ]
    },
    {
        "id": "66f88b7b.5ecb34",
        "type": "mqtt in",
        "z": "5b72d640.8efe98",
        "name": "profile",
        "topic": "oi4/OOCConnector/https%3A%2F%2Fsap.com/oi4-container/mam-onboarding/0000-0000-0000-0001/get/profile/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "fdff4dc.78908b",
        "x": 110,
        "y": 1049,
        "wires": [
            [
                "5f885cac.39e954"
            ]
        ]
    },
    {
        "id": "43d6a799.2ad348",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "profile",
        "func": "\nvar myCorrelationId = \"\";\n\n/* we got an get-topic from somewere */\nif (msg.payload.MessageId !== undefined)\n{\n   /* we got an virgin request from somewere */\n   if (msg.payload.CorrelationId === \"\")\n   {\n       myCorrelationId = msg.payload.MessageId;\n   }\n   /* we got an request including existing CorrelationId from somewere */\n   else\n   {\n       myCorrelationId = msg.payload.CorrelationId;\n   }\n}\n\nmsg.payload = {\n    \"MessageId\": \"\",\n    \"MessageType\": \"ua-data\",\n    \"PublisherId\": \"\",\n    \"DataSetClassId\": \"MyApp-profile-GUID\",\n    \"CorrelationId\": \"\",\n    \"Messages\": [\n        {\n            \"DataSetWriterId\": \"\",\n            \"SequenceNumber\": 1,\n            \"Timestamp\": \"\",\n            \"Status\": 0,\n            \"Payload\": {\n                \"resource\": [\n                    \"mam\",\n                    \"health\",\n                    \"license\",\n                    \"licenseText\",\n                    \"config\",\n                    \"rtLicense\",\n                    \"event\",\n                    \"profile\"\n                ]\n            }\n        }\n    ]\n};\n\nmsg.payload.PublisherId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar timestamp = Date.now();\nmsg.payload.MessageId = timestamp + '-' + msg.payload.PublisherId;\n\nmsg.payload.Messages[0].DataSetWriterId = global.get(\"MyAppMAM.ProductInstanceUri\");\n\nvar seqCnt = context.get(\"SeqCnt\") || 0;\nseqCnt += 1;\nmsg.payload.Messages[0].SequenceNumber = seqCnt;\ncontext.set(\"SeqCnt\", seqCnt);\n\nmyLastUpdateTime = new Date().toISOString();\n\nmsg.payload.Messages[0].Timestamp = myLastUpdateTime;\n\nmsg.payload.CorrelationId = myCorrelationId;\n\nmsg.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/pub/profile/\" + global.get(\"MyAppId\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 1049,
        "wires": [
            [
                "3925ce8b.850ae2",
                "37f7bd0b.b707e2"
            ]
        ]
    },
    {
        "id": "499246da.2f5f28",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub profile",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 140,
        "y": 1096,
        "wires": [
            [
                "43d6a799.2ad348"
            ]
        ]
    },
    {
        "id": "5f885cac.39e954",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 1049,
        "wires": [
            [
                "43d6a799.2ad348"
            ]
        ]
    },
    {
        "id": "77e4243.0a823dc",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "pub health (Normal/0, 100%)",
        "topic": "",
        "payload": "{\"Payload\":{\"health\":\"NORMAL_0\",\"healthState\":100}}",
        "payloadType": "json",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "948a8114.8fe17"
            ]
        ]
    },
    {
        "id": "805edf26.24b58",
        "type": "comment",
        "z": "5b72d640.8efe98",
        "name": "------------------------------------------------------------ MyApp basics ------------------------------------------------------------",
        "info": "**MyApp** represents an application container (in this case emulated through Node-RED). \nThe Node-RED flow is responsable for all application based OI4 basic services such as health, license, mam, ...\nIn addition, the application might be some kind of protocol adapter or offers other micro services, which is not implemented here.\n\n**MyApp** with the oi4Identifier created in function node _init_, is the publischer of all locally generated data. \nTherefore the \"PublisherId\" is always the oi4Identifier for the application.\n\n**MyApp** with the oi4Identifier created in function node _init_, is also the source of the application specific data.\nTherefore the \"DataSetWriterId\" is always the oi4Identifier from the application.\n\n\n**\"PublisherId\" === \"DataSetWriterId\"**\n\n\n# Read and follow _Initialization / ToDos_ instructions befor using the example flow",
        "x": 440,
        "y": 291,
        "wires": []
    },
    {
        "id": "e7285d32.b244e",
        "type": "inject",
        "z": "5b72d640.8efe98",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 110,
        "y": 391,
        "wires": [
            [
                "808663d0.611e5"
            ]
        ]
    },
    {
        "id": "808663d0.611e5",
        "type": "function",
        "z": "5b72d640.8efe98",
        "name": "init",
        "func": "/*\n  Attention: \n  birth, will and close message must be updated separatly from this global settings!\n  Ther is no way to configure this MQTT client settings via js code here.\n  Also the topics of all mqtt-in nodes needs to be updated - therefore the debug \n  outputs of this function prints the calculated topics to all get-topics.\n*/\n\n/* \n   Define content of Master Asset Model aka \"name plate\"\n   As defined in v0.10 of Development Guideline \n*/\nvar myAppMAM = {\n    \"Manufacturer\": {\n        \"Locale\": \"en-US\",\n        \"Text\": \"SAP\"\n    },\n    \"ManufacturerUri\": \"https://sap.com\",\n    \"Model\": {\n        \"Locale\": \"en-US\",\n        \"Text\": \"oi4-container\"\n    },\n    \"ProductCode\": \"mam-onboarding\",\n    \"HardwareRevision\": \"\",\n    \"SoftwareRevision\": \"0.1\",\n    \"DeviceRevision\": \"\",\n    \"DeviceManual\": \"\",\n    \"DeviceClass\": \"containerized application\",\n    \"SerialNumber\": \"0000-0000-0000-0001\",\n    \"ProductInstanceUri\": \"\",\n    \"RevisionCounter\": 1,\n    \"Description\": {\n        \"Locale\": \"en-US\",\n        \"Text\": \"SAP AAS onboarding application\"\n    }\n};\n\n\n/*\n  myAppMAM.ProductInstanceUri is defined as valid URI, and is a valid oi4Identifier.\n  So myAppMAM.ManufacturerUri is not encoded, but all other fields are to avoid \n  special, url-related, characters.\n*/\nmyAppMAM.ProductInstanceUri = myAppMAM.ManufacturerUri +\n                              \"/\" + encodeURIComponent(myAppMAM.Model.Text) +\n                              \"/\" + encodeURIComponent(myAppMAM.ProductCode) +\n                              \"/\" + encodeURIComponent(myAppMAM.SerialNumber);\n                              \nglobal.set(\"MyAppMAM\", myAppMAM);\n\n\n/*\n  myAppId, as part of the topic, should not have any url-related special characters,\n  because the forward slashes, as used in \"http://\" would 'confuse' the broker.\n*/\nmyAppId = encodeURIComponent(myAppMAM.ManufacturerUri) +\n          \"/\" + encodeURIComponent(myAppMAM.Model.Text) +\n          \"/\" + encodeURIComponent(myAppMAM.ProductCode) +\n          \"/\" + encodeURIComponent(myAppMAM.SerialNumber);\n\nglobal.set(\"MyAppId\", myAppId);\n\n\n/*\n  Each application is of a specific service type such as\n  Registry, OTConnector, Utility, Persistence, Aggregation or OOCConnector\n*/\nglobal.set(\"MyServiceType\", \"OOCConnector\");\n\nvar msgMam = {};\nvar msgHealth = {};\nvar msgLicense = {};\nvar msgLicenseText = {};\nvar msgConfig = {};\nvar msgRtLicense = {};\nvar msgProfile = {};\n\nmsgMam.topic         = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/mam/\" + global.get(\"MyAppId\");\nmsgHealth.topic      = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/health/\" + global.get(\"MyAppId\");\nmsgLicense.topic     = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/license/\" + global.get(\"MyAppId\");\nmsgLicenseText.topic = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/licenseText/\" + \"MyLic\";\nmsgConfig.topic      = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/config/\" + global.get(\"MyAppId\");\nmsgRtLicense.topic   = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/rtLicense/\" + global.get(\"MyAppId\");\nmsgProfile.topic     = \"oi4\" + \"/\" + global.get(\"MyServiceType\") + \"/\" + global.get(\"MyAppId\") + \"/get/profile/\" + global.get(\"MyAppId\");\n\n\nreturn [msgMam, msgHealth, msgLicense, msgLicenseText, msgConfig, msgRtLicense, msgProfile];",
        "outputs": 7,
        "noerr": 0,
        "x": 310,
        "y": 391,
        "wires": [
            [
                "f566d924.9b9f78"
            ],
            [
                "b29ab1dc.abd3"
            ],
            [
                "c432caa6.8f0258"
            ],
            [
                "988763cf.ad63f"
            ],
            [
                "f9c7856.2601f78"
            ],
            [
                "70b9d1a1.4f9f8"
            ],
            [
                "55bf7451.dd448c"
            ]
        ]
    },
    {
        "id": "c9837e1d.3e908",
        "type": "comment",
        "z": "5b72d640.8efe98",
        "name": "Initialization / ToDos",
        "info": "# First step\nFirst initialize the application by configuring the global available name plate (aka MAM) and the oi4Identifier. Open the _init_ node for this and change the content.\n\n# Second step\nConfigure the broker address, which is used by the MQTT client.\n\n# Third step\nUnfortunatelly, the MQTT client's default messages (birth, will, close) are hard coded and therefore not automatically updated with the globally available information from _init_ node! This needs to be done manually!\n\n# Fourth step\nUnfortunatelly, the MQTT client's _in_ nodes are having a hard coded topic and therefore they are not automatically updated with the globally available information from _init_ node! This needs to be done manually! Therefore the _debug_ nodes on _init_ printing the calculated topics for all .../get/<resource>/... to copy them to the related _mqtt in_ nodes.\n**hint**: The node [node-red-contrib-mqtt-dynamictopic](https://flows.nodered.org/node/node-red-contrib-mqtt-dynamictopic) could solve this problem, but it is not maintained anymore and does nor run on newer Node-RED versions.\n\n# And now?\nThis settings are used in all other nodes to calculate the topic and some payload content and send it over the MQTT client to the right broker! Starting the flow, after following the steps above, brings your demonstration application alive.\n\n**hint**: if you want an OI4 application and an OI4 complient device, you should also configure the _MyDevice_ flow.",
        "x": 150,
        "y": 351,
        "wires": []
    },
    {
        "id": "cb8f765f.af0648",
        "type": "comment",
        "z": "5b72d640.8efe98",
        "name": "Cyclic flow",
        "info": "",
        "x": 120,
        "y": 491,
        "wires": []
    },
    {
        "id": "f566d924.9b9f78",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "mam topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 490,
        "y": 331,
        "wires": []
    },
    {
        "id": "55bf7451.dd448c",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "profile topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 490,
        "y": 451,
        "wires": []
    },
    {
        "id": "70b9d1a1.4f9f8",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "rtLicense topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 680,
        "y": 431,
        "wires": []
    },
    {
        "id": "f9c7856.2601f78",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "config topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 490,
        "y": 411,
        "wires": []
    },
    {
        "id": "988763cf.ad63f",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "licenseText topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 680,
        "y": 391,
        "wires": []
    },
    {
        "id": "c432caa6.8f0258",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "license topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 490,
        "y": 371,
        "wires": []
    },
    {
        "id": "b29ab1dc.abd3",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "health topic",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 670,
        "y": 351,
        "wires": []
    },
    {
        "id": "f3658ee6.b011",
        "type": "http request",
        "z": "5b72d640.8efe98",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": false,
        "url": "http://i40-aas-sap-oi4.westeurope.cloudapp.azure.com/https-endpoint/interaction",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "basic",
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "f6c071de.5c26c"
            ]
        ]
    },
    {
        "id": "f6c071de.5c26c",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "AAS-Service response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1420,
        "y": 200,
        "wires": []
    },
    {
        "id": "dbb00a87.497d98",
        "type": "json",
        "z": "5b72d640.8efe98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 200,
        "wires": [
            [
                "e53e07f5.50b6b8",
                "93771c05.9d1aa"
            ]
        ]
    },
    {
        "id": "c022e350.6254c",
        "type": "debug",
        "z": "5b72d640.8efe98",
        "name": "MAM -> AAS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "fdff4dc.78908b",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "mqtt://docker.for.mac.localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]